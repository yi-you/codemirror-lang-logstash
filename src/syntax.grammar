@precedence {
  else @right,
  statement @cut,
  name,
  boolean_operator,
  value
}

@top LogstashConfig { topConfig+ }

@skip { whitespace | LineComment }

// Keywords

kw<term> { @specialize[@name={term}]<name, term> }

topConfig[@isGroup=Statement] {
    PluginSection
}

// Config { PluginSection (PluginSection)* }
PluginSection { PluginType "{" (BranchOrPlugin)* "}" }
BranchOrPlugin { Branch | Plugin }

// Plugins { (Plugin ( Plugin)*)? }
Plugin { name "{" (Attribute (Attribute)*)? "}" }
Attribute { name "=>" value  }
value { Plugin | bareWord | string | number | array | hash }
array { "["     ( value ("," value)* )?  "]" }
hash { "{" hashEntries? "}" }
hashEntries { hashEntry (hashEntry)* }
hashEntry { (number | bareWord | string) "=>" value }
Branch { kw<"if"> condition statement (!else kw<"else"> statement)? }
statement { "{" (BranchOrPlugin)* "}" }
condition { expression (boolean_operator expression)* }
expression { ("(" condition ")") | negativeExpression | InExpression | NotInExpression | CompareExpression | RegexpExpression | rvalue }
negativeExpression { ("!" "(" condition ")") | ("!" Selector) }
InExpression { rvalue kw<"in"> rvalue }
NotInExpression { rvalue "not" kw<"in"> rvalue }
rvalue { string | number | Selector | array | MethodCall | regexp }
MethodCall { bareWord "(" ( rvalue ( "," rvalue )* )? ")" }
CompareExpression { rvalue compareOperator rvalue }
Selector { selector_element+ }
RegexpExpression { rvalue  regexp_operator (string | regexp) }

@tokens {
    PluginType { "input" | "filter" | "output" }

    compareOperator { "==" | "!=" | "<=" | ">=" | "<" | ">" }
    regexp_operator { "=~" | "!~" }
    boolean_operator { "and" | "or" | "xor" | "nand" }
    selector_element { "[" ![\]\[,]+ "]" }

    name { $[A-Za-z0-9_\-]+ | string }

    // arrayValue { bareWord | string | number | array | hash }
    bareWord { $[A-Za-z_] $[A-Za-z0-9_]+ }
    double_quoted_string {'"' ( '\"' | ![\"])* '"'}
    single_quoted_string { "'" ( "\\'" | !['])* "'" }
    string {double_quoted_string | single_quoted_string}
    // string {
    //     '"' (![\\\n"] | "\\" _)* '"'? |
    //     "'" (![\\\n'] | "\\" _)* "'"?
    // }
    regexp { "/" (![/\\\n[] | "\\" ![\n] | "[" (![\n\\\]] | "\\" ![\n])* "]")* "/" }
    // regexp { '/' ( '\/' | !['/'])* '/' }
    number { "-"? $[0-9]+ ("." $[0-9]*)? }

    LineComment { "#" ![\n]* }
    whitespace { $[ \t\n\r]+ }
    "(" ")" "{" "}"
 }

@detectDelim
