@top { branch_or_plugin+ }

@skip { whitespace | LineComment }

value { True | False | Null | Number | String | Object | Array }

Object { "{" list<Property>? "}" }
Array  { "[" list<value>? "]" }

ParenthesizedExpression { "(" expression ")" }

Config { plugin_section (plugin_section)* }
plugin_section { plugin_type "{" (branch_or_plugin)* "}"}

branch_or_plugin { branch | plugin }
plugin_type { "input" | "filter" | "output" }
plugins { (plugin ( plugin)*)? }
plugin { name "{" attributes:( attribute (whitespace attribute)*)? "}" }
name { [A-Za-z0-9_-]+ | string }
attribute { name "=>" value  }
value {plugin | bareword | string | number | array | hash}
array_value {bareword | string | number | array | hash}
bareword {[A-Za-z_] [A-Za-z0-9_]+}
double_quoted_string {'"' ( '\"' | !'"' . )* '"'}
single_quoted_string { ( "'" ( "\\'" | !"'" . )* "'" }
string {double_quoted_string | single_quoted_string}
regexp {'/' ( '\/' | !'/' . )* '/' }
number {"-"? [0-9]+ ("." [0-9]*)?}
array {"["     ( value ("," value)* )?  "]"}
hash {"{" hashentries? "}"}
hashentries {hashentry (whitespace hashentry)*}
hashentry {name:(number | bareword | string) "=>" value}
branch { kw<"if"> ParenthesizedExpression statement (!else kw<"else"> statement)? }
if_statement { condition statement }
statement {"{" (branch_or_plugin _)* "}"}
condition { expression (_ boolean_operator expression)* }
expression { ("(" condition ")") | negative_expression | in_expression | not_in_expression | compare_expression | regexp_expression | rvalue}
negative_expression { ("!" "(" condition ")") | ("!" selector)}
in_expression {rvalue kw<"in"> rvalue}
not_in_expression {rvalue "not" kw<"in"> rvalue}
rvalue {string | number | selector | array | method_call | regexp}
method_call {bareword "(" ( rvalue ( "," rvalue )* )? ")"}
compare_expression {rvalue compare_operator rvalue}
compare_operator {"==" | "!=" | "<=" | ">=" | "<" | ">"}
regexp_expression {rvalue  regexp_operator (string | regexp)}
regexp_operator {"=~" | "!~"}
boolean_operator {"and" | "or" | "xor" | "nand"}
selector {selector_element+}
selector_element {"[" [^\]\[,]+ "]"}

@tokens {
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  word { identifierChar (identifierChar | @digit)* }
  identifier { word }

  Identifier { $[a-zA-Z_\-0-9]+ }
  True  { "true" }
  False { "false" }
  Null  { "null" }

  Number { '-'? int frac? exp?  }
  int  { '0' | $[1-9] @digit* }
  frac { '.' @digit+ }
  exp  { $[eE] $[+\-]? @digit+ }

  String {
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"?
  }
  Boolean { "#t" | "#f" }

  LineComment { "#" ![\n]* }

  whitespace { $[ \t\n\r]+ }

  "(" ")" "{" "}"
}

@detectDelim
